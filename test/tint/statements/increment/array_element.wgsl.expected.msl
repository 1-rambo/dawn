#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

void tint_symbol(const constant TintArrayLengths* const tint_symbol_2, device tint_array<uint, 1>* const tint_symbol_3) {
  uint const tint_symbol_1_save = min(1u, (((*(tint_symbol_2)).array_lengths[0u][0u] / 4u) - 1u));
  (*(tint_symbol_3))[tint_symbol_1_save] = ((*(tint_symbol_3))[tint_symbol_1_save] + 1u);
}


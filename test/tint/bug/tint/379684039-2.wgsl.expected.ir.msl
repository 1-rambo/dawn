#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct FSUniformData {
  tint_array<float4, 7> k;
  int2 size;
};

struct FSUniforms {
  tint_array<FSUniformData, 1> fsUniformData;
};

struct tint_module_vars_struct {
  thread uint* idx;
  const device FSUniforms* _storage;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

void tint_symbol(tint_module_vars_struct tint_module_vars) {
  int2 tint_symbol_1 = int2(0);
  {
    while(true) {
      TINT_ISOLATE_UB(tint_volatile_false)
      if ((tint_symbol_1[1u] >= (*tint_module_vars._storage).fsUniformData[min((*tint_module_vars.idx), ((((*tint_module_vars.tint_storage_buffer_sizes)[0u][0u] - 0u) / 128u) - 1u))].size[1u])) {
        break;
      }
      {
      }
      continue;
    }
  }
}

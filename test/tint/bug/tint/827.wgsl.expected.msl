#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

int2 tint_clamp(int2 e, int2 low, int2 high) {
  return min(max(e, low), high);
}

struct Result {
  /* 0x0000 */ tint_array<float, 1> values;
};

void tint_symbol_inner(uint3 GlobalInvocationId, depth2d<float, access::sample> tint_symbol_1, device Result* const tint_symbol_2, const constant TintArrayLengths* const tint_symbol_3) {
  uint const level_idx = min(0u, (tint_symbol_1.get_num_mip_levels() - 1u));
  (*(tint_symbol_2)).values[min(((GlobalInvocationId[1] * 128u) + GlobalInvocationId[0]), ((((*(tint_symbol_3)).array_lengths[0u][0u] - 0u) / 4u) - 1u))] = tint_symbol_1.read(uint2(tint_clamp(int2(int(GlobalInvocationId[0]), int(GlobalInvocationId[1])), int2(0), int2((uint2(tint_symbol_1.get_width(level_idx), tint_symbol_1.get_height(level_idx)) - uint2(1u))))), level_idx);
}

kernel void tint_symbol(depth2d<float, access::sample> tint_symbol_4 [[texture(0)]], device Result* tint_symbol_5 [[buffer(0)]], const constant TintArrayLengths* tint_symbol_6 [[buffer(30)]], uint3 GlobalInvocationId [[thread_position_in_grid]]) {
  tint_symbol_inner(GlobalInvocationId, tint_symbol_4, tint_symbol_5, tint_symbol_6);
  return;
}


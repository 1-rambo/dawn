#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct PointLight {
  float4 position;
};

struct PointLights {
  tint_array<PointLight, 1> values;
};

struct Uniforms {
  float4x4 worldView;
  float4x4 proj;
  uint numPointLights;
  uint color_source;
  float4 color;
};

struct FragmentInput {
  float4 position;
  float4 view_position;
  float4 normal;
  float2 uv;
  float4 color;
};

struct FragmentOutput {
  float4 color;
};

struct tint_symbol_3 {
  float4 view_position [[user(locn0)]];
  float4 normal [[user(locn1)]];
  float2 uv [[user(locn2)]];
  float4 color [[user(locn3)]];
};

struct tint_symbol_4 {
  float4 color [[color(0)]];
};

FragmentOutput tint_symbol_inner(FragmentInput tint_symbol_1) {
  FragmentOutput output = {};
  output.color = float4(1.0f, 0.0f, 0.0f, 1.0f);
  return output;
}

fragment tint_symbol_4 tint_symbol(float4 position [[position]], tint_symbol_3 tint_symbol_2 [[stage_in]]) {
  FragmentInput const tint_symbol_5 = FragmentInput{.position=position, .view_position=tint_symbol_2.view_position, .normal=tint_symbol_2.normal, .uv=tint_symbol_2.uv, .color=tint_symbol_2.color};
  FragmentOutput const inner_result = tint_symbol_inner(tint_symbol_5);
  tint_symbol_4 wrapper_result = {};
  wrapper_result.color = inner_result.color;
  return wrapper_result;
}


#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_symbol_4 {
  /* 0x0000 */ tint_array<int, 1> arr;
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

int foo(const device tint_array<int, 1>* const tint_symbol_1, const constant TintArrayLengths* const tint_symbol_2) {
  return (*(tint_symbol_1))[min(0u, (((*(tint_symbol_2)).array_lengths[0u][0u] / 4u) - 1u))];
}

kernel void tint_symbol(const device tint_symbol_4* tint_symbol_3 [[buffer(0)]], const constant TintArrayLengths* tint_symbol_5 [[buffer(30)]]) {
  foo(&((*(tint_symbol_3)).arr), tint_symbol_5);
  return;
}


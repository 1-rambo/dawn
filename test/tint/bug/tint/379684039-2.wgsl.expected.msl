#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  uint idx;
};

struct FSUniformData {
  /* 0x0000 */ tint_array<float4, 7> k;
  /* 0x0070 */ int2 size;
  /* 0x0078 */ tint_array<int8_t, 8> tint_pad;
};

struct FSUniforms {
  /* 0x0000 */ tint_array<FSUniformData, 1> fsUniformData;
};

void tint_symbol(thread tint_private_vars_struct* const tint_private_vars, const device FSUniforms* const tint_symbol_2) {
  int2 tint_symbol_1 = int2(0);
  while(true) {
    if ((tint_symbol_1[1] >= (*(tint_symbol_2)).fsUniformData[(*(tint_private_vars)).idx].size[1])) {
      break;
    }
  }
}


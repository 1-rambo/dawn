#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  uint count;
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

struct Outputs {
  /* 0x0000 */ tint_array<uint, 1> data;
};

void push_output(uint value, thread tint_private_vars_struct* const tint_private_vars, device Outputs* const tint_symbol_1, const constant TintArrayLengths* const tint_symbol_2) {
  (*(tint_symbol_1)).data[min((*(tint_private_vars)).count, ((((*(tint_symbol_2)).array_lengths[0u][0u] - 0u) / 4u) - 1u))] = value;
  (*(tint_private_vars)).count = ((*(tint_private_vars)).count + 1u);
}

kernel void tint_symbol(device Outputs* tint_symbol_3 [[buffer(0)]], const constant TintArrayLengths* tint_symbol_4 [[buffer(30)]]) {
  thread tint_private_vars_struct tint_private_vars = {};
  tint_private_vars.count = 0u;
  uint a = 0u;
  uint b = 10u;
  uint c = 4294967294u;
  a = (a + 1u);
  b = (b + 1u);
  c = (c + 1u);
  push_output(a, &(tint_private_vars), tint_symbol_3, tint_symbol_4);
  push_output(b, &(tint_private_vars), tint_symbol_3, tint_symbol_4);
  push_output(c, &(tint_private_vars), tint_symbol_3, tint_symbol_4);
  return;
}


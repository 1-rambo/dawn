#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

struct S {
  /* 0x0000 */ float4 a;
  /* 0x0010 */ int b;
  /* 0x0014 */ tint_array<int8_t, 12> tint_pad;
};

struct sb_block {
  /* 0x0000 */ tint_array<S, 1> inner;
};

void main_1(const device sb_block* const tint_symbol_1, const constant TintArrayLengths* const tint_symbol_2) {
  S const x_18 = (*(tint_symbol_1)).inner[min(1u, ((((*(tint_symbol_2)).array_lengths[0u][0u] - 0u) / 32u) - 1u))];
  return;
}

kernel void tint_symbol(const device sb_block* tint_symbol_3 [[buffer(0)]], const constant TintArrayLengths* tint_symbol_4 [[buffer(30)]]) {
  main_1(tint_symbol_3, tint_symbol_4);
  return;
}


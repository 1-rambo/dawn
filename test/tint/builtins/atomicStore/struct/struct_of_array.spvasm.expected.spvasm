; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 83
; Schema: 0
               OpCapability Shader
         %39 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %compute_main "compute_main" %compute_main_local_invocation_index_Input
               OpExecutionMode %compute_main LocalSize 1 1 1
               OpName %local_invocation_index_1 "local_invocation_index_1"
               OpMemberName %S_atomic 0 "x"
               OpMemberName %S_atomic 1 "a"
               OpMemberName %S_atomic 2 "y"
               OpName %S_atomic "S_atomic"
               OpName %wg "wg"
               OpName %compute_main_local_invocation_index_Input "compute_main_local_invocation_index_Input"
               OpName %compute_main_inner "compute_main_inner"
               OpName %local_invocation_index_2 "local_invocation_index_2"
               OpName %idx "idx"
               OpName %x_35 "x_35"
               OpName %compute_main_1 "compute_main_1"
               OpName %x_53 "x_53"
               OpName %compute_main_inner_0 "compute_main_inner"
               OpName %local_invocation_index_1_param "local_invocation_index_1_param"
               OpName %compute_main "compute_main"
               OpMemberDecorate %S_atomic 0 Offset 0
               OpDecorate %_arr_uint_uint_10 ArrayStride 4
               OpMemberDecorate %S_atomic 1 Offset 4
               OpMemberDecorate %S_atomic 2 Offset 44
               OpDecorate %compute_main_local_invocation_index_Input BuiltIn LocalInvocationIndex
       %uint = OpTypeInt 32 0
%_ptr_Private_uint = OpTypePointer Private %uint
          %4 = OpConstantNull %uint
%local_invocation_index_1 = OpVariable %_ptr_Private_uint Private %4
        %int = OpTypeInt 32 1
    %uint_10 = OpConstant %uint 10
%_arr_uint_uint_10 = OpTypeArray %uint %uint_10
   %S_atomic = OpTypeStruct %int %_arr_uint_uint_10 %uint
%_ptr_Workgroup_S_atomic = OpTypePointer Workgroup %S_atomic
         %wg = OpVariable %_ptr_Workgroup_S_atomic Workgroup
%_ptr_Input_uint = OpTypePointer Input %uint
%compute_main_local_invocation_index_Input = OpVariable %_ptr_Input_uint Input
       %void = OpTypeVoid
         %16 = OpTypeFunction %void %uint
%_ptr_Function_uint = OpTypePointer Function %uint
     %uint_0 = OpConstant %uint 0
%_ptr_Workgroup_int = OpTypePointer Workgroup %int
      %int_0 = OpConstant %int 0
%_ptr_Workgroup_uint = OpTypePointer Workgroup %uint
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
     %uint_9 = OpConstant %uint 9
%_ptr_Workgroup_uint_0 = OpTypePointer Workgroup %uint
     %uint_1 = OpConstant %uint 1
   %uint_264 = OpConstant %uint 264
     %uint_4 = OpConstant %uint 4
         %53 = OpTypeFunction %void
%compute_main_inner = OpFunction %void None %16
%local_invocation_index_2 = OpFunctionParameter %uint
         %17 = OpLabel
        %idx = OpVariable %_ptr_Function_uint Function
               OpStore %idx %uint_0
         %21 = OpAccessChain %_ptr_Workgroup_int %wg %uint_0
               OpStore %21 %int_0 None
         %24 = OpAccessChain %_ptr_Workgroup_uint %wg %uint_2
               OpStore %24 %uint_0 None
               OpStore %idx %local_invocation_index_2 None
               OpBranch %29
         %29 = OpLabel
               OpLoopMerge %30 %28 None
               OpBranch %27
         %27 = OpLabel
         %31 = OpLoad %uint %idx None
         %32 = OpULessThan %bool %31 %uint_10
         %34 = OpLogicalNot %bool %32
               OpSelectionMerge %35 None
               OpBranchConditional %34 %36 %35
         %36 = OpLabel
               OpBranch %30
         %35 = OpLabel
       %x_35 = OpLoad %uint %idx None
         %38 = OpExtInst %uint %39 UMin %x_35 %uint_9
         %41 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %38
               OpAtomicStore %41 %uint_2 %uint_0 %uint_0
               OpBranch %28
         %28 = OpLabel
         %45 = OpLoad %uint %idx None
         %46 = OpIAdd %uint %45 %uint_1
               OpStore %idx %46 None
               OpBranch %29
         %30 = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_264
         %49 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %uint_4
               OpAtomicStore %49 %uint_2 %uint_0 %uint_1
               OpReturn
               OpFunctionEnd
%compute_main_1 = OpFunction %void None %53
         %54 = OpLabel
       %x_53 = OpLoad %uint %local_invocation_index_1 None
         %56 = OpFunctionCall %void %compute_main_inner %x_53
               OpReturn
               OpFunctionEnd
%compute_main_inner_0 = OpFunction %void None %16
%local_invocation_index_1_param = OpFunctionParameter %uint
         %59 = OpLabel
         %60 = OpULessThan %bool %local_invocation_index_1_param %uint_1
               OpSelectionMerge %61 None
               OpBranchConditional %60 %62 %61
         %62 = OpLabel
         %63 = OpAccessChain %_ptr_Workgroup_int %wg %uint_0
               OpStore %63 %int_0 None
         %64 = OpAccessChain %_ptr_Workgroup_uint %wg %uint_2
               OpStore %64 %uint_0 None
               OpBranch %61
         %61 = OpLabel
               OpBranch %65
         %65 = OpLabel
               OpBranch %68
         %68 = OpLabel
         %70 = OpPhi %uint %local_invocation_index_1_param %65 %71 %67
               OpLoopMerge %69 %67 None
               OpBranch %66
         %66 = OpLabel
         %72 = OpUGreaterThanEqual %bool %70 %uint_10
               OpSelectionMerge %73 None
               OpBranchConditional %72 %74 %73
         %74 = OpLabel
               OpBranch %69
         %73 = OpLabel
         %75 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %70
               OpAtomicStore %75 %uint_2 %uint_0 %uint_0
               OpBranch %67
         %67 = OpLabel
         %71 = OpIAdd %uint %70 %uint_1
               OpBranch %68
         %69 = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_264
               OpStore %local_invocation_index_1 %local_invocation_index_1_param None
         %78 = OpFunctionCall %void %compute_main_1
               OpReturn
               OpFunctionEnd
%compute_main = OpFunction %void None %53
         %80 = OpLabel
         %81 = OpLoad %uint %compute_main_local_invocation_index_Input None
         %82 = OpFunctionCall %void %compute_main_inner_0 %81
               OpReturn
               OpFunctionEnd

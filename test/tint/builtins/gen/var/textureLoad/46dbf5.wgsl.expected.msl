//
// fragment_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureLoad_46dbf5(texture3d<float, access::read> tint_symbol) {
  uint3 arg_1 = uint3(1u);
  float4 res = tint_symbol.read(uint3(min(arg_1, (uint3(tint_symbol.get_width(), tint_symbol.get_height(), tint_symbol.get_depth()) - uint3(1u)))));
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

fragment void fragment_main(device float4* tint_symbol_1 [[buffer(0)]], texture3d<float, access::read> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_46dbf5(tint_symbol_2);
  return;
}

//
// compute_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureLoad_46dbf5(texture3d<float, access::read> tint_symbol) {
  uint3 arg_1 = uint3(1u);
  float4 res = tint_symbol.read(uint3(min(arg_1, (uint3(tint_symbol.get_width(), tint_symbol.get_height(), tint_symbol.get_depth()) - uint3(1u)))));
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

kernel void compute_main(device float4* tint_symbol_1 [[buffer(0)]], texture3d<float, access::read> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_46dbf5(tint_symbol_2);
  return;
}

//
// vertex_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureLoad_46dbf5(texture3d<float, access::read> tint_symbol_1) {
  uint3 arg_1 = uint3(1u);
  float4 res = tint_symbol_1.read(uint3(min(arg_1, (uint3(tint_symbol_1.get_width(), tint_symbol_1.get_height(), tint_symbol_1.get_depth()) - uint3(1u)))));
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

struct tint_symbol {
  float4 prevent_dce [[user(locn0)]] [[flat]];
  float4 pos [[position]];
};

VertexOutput vertex_main_inner(texture3d<float, access::read> tint_symbol_2) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureLoad_46dbf5(tint_symbol_2);
  return out;
}

vertex tint_symbol vertex_main(texture3d<float, access::read> tint_symbol_3 [[texture(0)]]) {
  VertexOutput const inner_result = vertex_main_inner(tint_symbol_3);
  tint_symbol wrapper_result = {};
  wrapper_result.pos = inner_result.pos;
  wrapper_result.prevent_dce = inner_result.prevent_dce;
  return wrapper_result;
}


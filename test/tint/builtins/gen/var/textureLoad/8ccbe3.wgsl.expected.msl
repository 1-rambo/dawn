#include <metal_stdlib>

using namespace metal;
int2 tint_clamp(int2 e, int2 low, int2 high) {
  return min(max(e, low), high);
}

float textureLoad_8ccbe3(depth2d<float, access::sample> tint_symbol_1) {
  int2 arg_1 = int2(1);
  uint arg_2 = 1u;
  uint const level_idx = min(uint(arg_2), (tint_symbol_1.get_num_mip_levels() - 1u));
  float res = tint_symbol_1.read(uint2(tint_clamp(arg_1, int2(0), int2((uint2(tint_symbol_1.get_width(level_idx), tint_symbol_1.get_height(level_idx)) - uint2(1u))))), level_idx);
  return res;
}

fragment void fragment_main(device float* tint_symbol_2 [[buffer(0)]], depth2d<float, access::sample> tint_symbol_3 [[texture(0)]]) {
  *(tint_symbol_2) = textureLoad_8ccbe3(tint_symbol_3);
  return;
}

kernel void compute_main(device float* tint_symbol_4 [[buffer(0)]], depth2d<float, access::sample> tint_symbol_5 [[texture(0)]]) {
  *(tint_symbol_4) = textureLoad_8ccbe3(tint_symbol_5);
  return;
}

struct VertexOutput {
  float4 pos;
  float prevent_dce;
};

struct tint_symbol {
  float prevent_dce [[user(locn0)]] [[flat]];
  float4 pos [[position]];
};

VertexOutput vertex_main_inner(depth2d<float, access::sample> tint_symbol_6) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureLoad_8ccbe3(tint_symbol_6);
  return out;
}

vertex tint_symbol vertex_main(depth2d<float, access::sample> tint_symbol_7 [[texture(0)]]) {
  VertexOutput const inner_result = vertex_main_inner(tint_symbol_7);
  tint_symbol wrapper_result = {};
  wrapper_result.pos = inner_result.pos;
  wrapper_result.prevent_dce = inner_result.prevent_dce;
  return wrapper_result;
}


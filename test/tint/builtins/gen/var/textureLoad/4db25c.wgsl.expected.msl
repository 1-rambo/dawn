//
// fragment_main
//
#include <metal_stdlib>

using namespace metal;
float textureLoad_4db25c(depth2d_ms<float, access::read> tint_symbol) {
  uint2 arg_1 = uint2(1u);
  uint arg_2 = 1u;
  float res = tint_symbol.read(uint2(min(arg_1, (uint2(tint_symbol.get_width(), tint_symbol.get_height()) - uint2(1u)))), arg_2);
  return res;
}

struct VertexOutput {
  float4 pos;
  float prevent_dce;
};

fragment void fragment_main(device float* tint_symbol_1 [[buffer(0)]], depth2d_ms<float, access::read> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_4db25c(tint_symbol_2);
  return;
}

//
// compute_main
//
#include <metal_stdlib>

using namespace metal;
float textureLoad_4db25c(depth2d_ms<float, access::read> tint_symbol) {
  uint2 arg_1 = uint2(1u);
  uint arg_2 = 1u;
  float res = tint_symbol.read(uint2(min(arg_1, (uint2(tint_symbol.get_width(), tint_symbol.get_height()) - uint2(1u)))), arg_2);
  return res;
}

struct VertexOutput {
  float4 pos;
  float prevent_dce;
};

kernel void compute_main(device float* tint_symbol_1 [[buffer(0)]], depth2d_ms<float, access::read> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_4db25c(tint_symbol_2);
  return;
}

//
// vertex_main
//
#include <metal_stdlib>

using namespace metal;
float textureLoad_4db25c(depth2d_ms<float, access::read> tint_symbol_1) {
  uint2 arg_1 = uint2(1u);
  uint arg_2 = 1u;
  float res = tint_symbol_1.read(uint2(min(arg_1, (uint2(tint_symbol_1.get_width(), tint_symbol_1.get_height()) - uint2(1u)))), arg_2);
  return res;
}

struct VertexOutput {
  float4 pos;
  float prevent_dce;
};

struct tint_symbol {
  float prevent_dce [[user(locn0)]] [[flat]];
  float4 pos [[position]];
};

VertexOutput vertex_main_inner(depth2d_ms<float, access::read> tint_symbol_2) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureLoad_4db25c(tint_symbol_2);
  return out;
}

vertex tint_symbol vertex_main(depth2d_ms<float, access::read> tint_symbol_3 [[texture(0)]]) {
  VertexOutput const inner_result = vertex_main_inner(tint_symbol_3);
  tint_symbol wrapper_result = {};
  wrapper_result.pos = inner_result.pos;
  wrapper_result.prevent_dce = inner_result.prevent_dce;
  return wrapper_result;
}


//
// fragment_main
//
#include <metal_stdlib>

using namespace metal;
int3 tint_clamp(int3 e, int3 low, int3 high) {
  return min(max(e, low), high);
}

int4 textureLoad_e35f72(texture3d<int, access::sample> tint_symbol) {
  int3 arg_1 = int3(1);
  uint arg_2 = 1u;
  uint const level_idx = min(uint(arg_2), (tint_symbol.get_num_mip_levels() - 1u));
  int4 res = tint_symbol.read(uint3(tint_clamp(arg_1, int3(0), int3((uint3(tint_symbol.get_width(level_idx), tint_symbol.get_height(level_idx), tint_symbol.get_depth(level_idx)) - uint3(1u))))), level_idx);
  return res;
}

struct VertexOutput {
  float4 pos;
  int4 prevent_dce;
};

fragment void fragment_main(device int4* tint_symbol_1 [[buffer(0)]], texture3d<int, access::sample> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_e35f72(tint_symbol_2);
  return;
}

//
// compute_main
//
#include <metal_stdlib>

using namespace metal;
int3 tint_clamp(int3 e, int3 low, int3 high) {
  return min(max(e, low), high);
}

int4 textureLoad_e35f72(texture3d<int, access::sample> tint_symbol) {
  int3 arg_1 = int3(1);
  uint arg_2 = 1u;
  uint const level_idx = min(uint(arg_2), (tint_symbol.get_num_mip_levels() - 1u));
  int4 res = tint_symbol.read(uint3(tint_clamp(arg_1, int3(0), int3((uint3(tint_symbol.get_width(level_idx), tint_symbol.get_height(level_idx), tint_symbol.get_depth(level_idx)) - uint3(1u))))), level_idx);
  return res;
}

struct VertexOutput {
  float4 pos;
  int4 prevent_dce;
};

kernel void compute_main(device int4* tint_symbol_1 [[buffer(0)]], texture3d<int, access::sample> tint_symbol_2 [[texture(0)]]) {
  *(tint_symbol_1) = textureLoad_e35f72(tint_symbol_2);
  return;
}

//
// vertex_main
//
#include <metal_stdlib>

using namespace metal;
int3 tint_clamp(int3 e, int3 low, int3 high) {
  return min(max(e, low), high);
}

int4 textureLoad_e35f72(texture3d<int, access::sample> tint_symbol_1) {
  int3 arg_1 = int3(1);
  uint arg_2 = 1u;
  uint const level_idx = min(uint(arg_2), (tint_symbol_1.get_num_mip_levels() - 1u));
  int4 res = tint_symbol_1.read(uint3(tint_clamp(arg_1, int3(0), int3((uint3(tint_symbol_1.get_width(level_idx), tint_symbol_1.get_height(level_idx), tint_symbol_1.get_depth(level_idx)) - uint3(1u))))), level_idx);
  return res;
}

struct VertexOutput {
  float4 pos;
  int4 prevent_dce;
};

struct tint_symbol {
  int4 prevent_dce [[user(locn0)]] [[flat]];
  float4 pos [[position]];
};

VertexOutput vertex_main_inner(texture3d<int, access::sample> tint_symbol_2) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureLoad_e35f72(tint_symbol_2);
  return out;
}

vertex tint_symbol vertex_main(texture3d<int, access::sample> tint_symbol_3 [[texture(0)]]) {
  VertexOutput const inner_result = vertex_main_inner(tint_symbol_3);
  tint_symbol wrapper_result = {};
  wrapper_result.pos = inner_result.pos;
  wrapper_result.prevent_dce = inner_result.prevent_dce;
  return wrapper_result;
}


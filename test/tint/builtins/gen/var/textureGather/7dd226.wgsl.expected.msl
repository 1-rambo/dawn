//
// fragment_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureGather_7dd226(depthcube_array<float, access::sample> tint_symbol, sampler tint_symbol_1) {
  float3 arg_2 = float3(1.0f);
  uint arg_3 = 1u;
  float4 res = tint_symbol.gather(tint_symbol_1, arg_2, arg_3);
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

fragment void fragment_main(device float4* tint_symbol_2 [[buffer(0)]], depthcube_array<float, access::sample> tint_symbol_3 [[texture(0)]], sampler tint_symbol_4 [[sampler(0)]]) {
  *(tint_symbol_2) = textureGather_7dd226(tint_symbol_3, tint_symbol_4);
  return;
}

//
// compute_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureGather_7dd226(depthcube_array<float, access::sample> tint_symbol, sampler tint_symbol_1) {
  float3 arg_2 = float3(1.0f);
  uint arg_3 = 1u;
  float4 res = tint_symbol.gather(tint_symbol_1, arg_2, arg_3);
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

kernel void compute_main(device float4* tint_symbol_2 [[buffer(0)]], depthcube_array<float, access::sample> tint_symbol_3 [[texture(0)]], sampler tint_symbol_4 [[sampler(0)]]) {
  *(tint_symbol_2) = textureGather_7dd226(tint_symbol_3, tint_symbol_4);
  return;
}

//
// vertex_main
//
#include <metal_stdlib>

using namespace metal;
float4 textureGather_7dd226(depthcube_array<float, access::sample> tint_symbol_1, sampler tint_symbol_2) {
  float3 arg_2 = float3(1.0f);
  uint arg_3 = 1u;
  float4 res = tint_symbol_1.gather(tint_symbol_2, arg_2, arg_3);
  return res;
}

struct VertexOutput {
  float4 pos;
  float4 prevent_dce;
};

struct tint_symbol {
  float4 prevent_dce [[user(locn0)]] [[flat]];
  float4 pos [[position]];
};

VertexOutput vertex_main_inner(depthcube_array<float, access::sample> tint_symbol_3, sampler tint_symbol_4) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureGather_7dd226(tint_symbol_3, tint_symbol_4);
  return out;
}

vertex tint_symbol vertex_main(depthcube_array<float, access::sample> tint_symbol_5 [[texture(0)]], sampler tint_symbol_6 [[sampler(0)]]) {
  VertexOutput const inner_result = vertex_main_inner(tint_symbol_5, tint_symbol_6);
  tint_symbol wrapper_result = {};
  wrapper_result.pos = inner_result.pos;
  wrapper_result.prevent_dce = inner_result.prevent_dce;
  return wrapper_result;
}


#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Inner {
  /* 0x0000 */ half scalar_f16;
  /* 0x0002 */ tint_array<int8_t, 6> tint_pad;
  /* 0x0008 */ half3 vec3_f16;
  /* 0x000e */ tint_array<int8_t, 2> tint_pad_1;
  /* 0x0010 */ half2x4 mat2x4_f16;
};

struct S {
  /* 0x0000 */ Inner inner;
};

struct tint_module_vars_struct {
  const constant S* u;
  device S* s;
};

void tint_store_and_preserve_padding_1(device Inner* const target, Inner value_param) {
  (*target).scalar_f16 = value_param.scalar_f16;
  (*target).vec3_f16 = value_param.vec3_f16;
  (*target).mat2x4_f16 = value_param.mat2x4_f16;
}

void tint_store_and_preserve_padding(device S* const target, S value_param) {
  tint_store_and_preserve_padding_1((&(*target).inner), value_param.inner);
}

kernel void tint_symbol(const constant S* u [[buffer(0)]], device S* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  S const x = (*tint_module_vars.u);
  tint_store_and_preserve_padding(tint_module_vars.s, x);
}

#include <metal_stdlib>

using namespace metal;
struct buf1 {
  /* 0x0000 */ int ten;
};
struct buf0 {
  /* 0x0000 */ int minusEight;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_8, constant buf0& x_10, thread float4* const tint_symbol_4) {
  int a = 0;
  int b = 0;
  int i = 0;
  a = 0;
  b = 0;
  i = 0;
  while (true) {
    int const x_36 = i;
    int const x_38 = x_8.ten;
    if ((x_36 < x_38)) {
    } else {
      break;
    }
    int const x_41 = a;
    if ((x_41 > 5)) {
      break;
    }
    int const x_46 = x_10.minusEight;
    int const x_48 = a;
    a = (x_48 + (x_46 / -4));
    int const x_50 = b;
    b = (x_50 + 1);
    {
      int const x_52 = i;
      i = (x_52 + 1);
    }
  }
  int const x_54 = b;
  if ((x_54 == 3)) {
    *(tint_symbol_4) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_4) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_8 [[buffer(1)]], constant buf0& x_10 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_1(x_8, x_10, &(tint_symbol_5));
  main_out const tint_symbol_2 = {.x_GLF_color_1=tint_symbol_5};
  tint_symbol_1 const tint_symbol_3 = {.x_GLF_color_1=tint_symbol_2.x_GLF_color_1};
  return tint_symbol_3;
}


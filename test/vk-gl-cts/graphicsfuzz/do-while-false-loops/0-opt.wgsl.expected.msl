#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

float3 f_() {
  int iteration = 0;
  int k = 0;
  iteration = 0;
  k = 0;
  while (true) {
    int const x_7 = k;
    if ((x_7 < 100)) {
    } else {
      break;
    }
    int const x_8 = iteration;
    iteration = as_type<int>((as_type<uint>(x_8) + as_type<uint>(1)));
    {
      int const x_10 = k;
      k = as_type<int>((as_type<uint>(x_10) + as_type<uint>(1)));
    }
  }
  int const x_12 = iteration;
  if ((x_12 < 100)) {
    int const x_13 = iteration;
    int const x_15 = iteration;
    return float3(1.0f, float(as_type<int>((as_type<uint>(x_13) - as_type<uint>(1)))), float(as_type<int>((as_type<uint>(x_15) - as_type<uint>(1)))));
  } else {
    while (true) {
      while (true) {
        return float3(1.0f, 0.0f, 0.0f);
      }
      return float3(0.0f, 0.0f, 0.0f);
    }
    return float3(0.0f, 0.0f, 0.0f);
  }
  return float3(0.0f, 0.0f, 0.0f);
}

void main_1(thread float4* const tint_symbol_4) {
  float3 const x_35 = f_();
  *(tint_symbol_4) = float4(x_35.x, x_35.y, x_35.z, 1.0f);
  return;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_1(&(tint_symbol_5));
  main_out const tint_symbol_2 = {.x_GLF_color_1=tint_symbol_5};
  tint_symbol_1 const tint_symbol_3 = {.x_GLF_color_1=tint_symbol_2.x_GLF_color_1};
  return tint_symbol_3;
}

